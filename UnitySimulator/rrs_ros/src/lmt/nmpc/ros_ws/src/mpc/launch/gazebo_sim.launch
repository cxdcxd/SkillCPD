<?xml version="1.0" encoding="UTF-8"?>
<launch>

  <arg name="kinova_robotType" default="j2s7s300"/>
  <arg name="kinova_robotName" default="$(arg kinova_robotType)"/>
  <arg name="paused" default="true"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="is7dof" default="true"/>
  <arg name="use_trajectory_controller" default="true"/>
  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find mpc)/worlds/jaco.world"/>
<!--    <arg name="world_name" value="$(find mpc)/worlds/jaco_bookshelf_kinect2.world"/>-->
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>


  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
    command="$(find xacro)/xacro --inorder '$(find kinova_description)/urdf/$(arg kinova_robotType)_standalone.xacro'" />


  <!-- The name of the parameter under which the URDF is loaded -->
  <arg name="robot_description" default="robot_description"/>
  <!-- The semantic description that corresponds to the URDF -->
  <param name="$(arg robot_description)_semantic" textfile="$(find j2s7s300_moveit_config)/config/j2s7s300.srdf" />


  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
 
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
  args="-urdf -model $(arg kinova_robotName) -param robot_description
      -J $(arg kinova_robotType)_joint_1 0.0
      -J $(arg kinova_robotType)_joint_2 2.9
      -J $(arg kinova_robotType)_joint_3 0.0
      -J $(arg kinova_robotType)_joint_4 1.3
      -J $(arg kinova_robotType)_joint_5 -2.07
      -J $(arg kinova_robotType)_joint_6 1.4
      -J $(arg kinova_robotType)_joint_7 0.0
      -J $(arg kinova_robotType)_joint_finger_1 1.0
      -J $(arg kinova_robotType)_joint_finger_2 1.0
      -J $(arg kinova_robotType)_joint_finger_3 1.0" />

  <!-- ros_control launch file -->
<!--  <include file="$(find kinova_control)/launch/kinova_control.launch">
    <arg name="kinova_robotName" value="$(arg kinova_robotName)"/>
    <arg name="kinova_robotType" value="$(arg kinova_robotType)"/>
    <arg name="use_trajectory_controller" value="$(arg use_trajectory_controller)"/>
    <arg name="is7dof" value="$(arg is7dof)"/>
  </include>-->

  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find kinova_control)/config/$(arg kinova_robotName)_control.yaml" command="load"/>
  <node name="$(arg kinova_robotName)_trajectory_controller" pkg="controller_manager" type="spawner"
      output="screen" ns="$(arg kinova_robotName)" 
      args="position_joint_trajectory_controller
      effort_finger_trajectory_controller
      finger_tip_1_position_controller
      finger_tip_2_position_controller 
      finger_tip_3_position_controller
      joint_state_controller"/>
  <node name="command_robot_home_pose" pkg="kinova_control" type="move_robot.py"
        respawn="false" output="screen" args="$(arg kinova_robotType)">       
  </node>






  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
        respawn="false" output="screen">
    <remap from="/joint_states" to="/$(arg kinova_robotName)/joint_states"/>
  </node>

  <!--  rviz visualization-->
  <arg name="command_args" value="-d $(find mpc)/config/rviz_vis_pc.rviz" />
  <!-- options: 1.gazebo_rviz_vis.rviz, 2.rviz_vis_pc.rviz-->
  <node name="rviz_vis"  pkg="rviz" type="rviz" respawn="false"
        args="$(arg command_args)"/>

  <node name="traj_visualizer" pkg="hector_trajectory_server" type="hector_trajectory_server" respawn="false">
         <param name="~target_frame_name" type="string" value="root" />
         <param name="~source_frame_name" type="string" value="j2s7s300_end_effector" />
         <param name="~trajectory_publish_rate" type="double" value="5" />
  </node>

<!--  euler angle:   0.056075 0.597331 1.54898-->
<!--   quaternion:  0.6886    0.6622    0.2290   -0.1865-->
  <node pkg="tf" type="static_transform_publisher" name = "temp_tf"
  args=" 0.0266198720001 -0.861693771999 1.267963104
  -0.277769472553 0.276828089415 0.63249348873 0.667953827553 /world /temp_camera_link 100" />
  <node pkg="tf" type="static_transform_publisher" name = "kinect_tf"
  args="0 0 0 -1.58 0 -1.515 /temp_camera_link /camera_link 100" />
</launch>
